generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  nickname     String
  age          Int
  role         String
  naverId      String?
  kakaoId      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]
  reviews      Review[]
  files        File[]
  likes        Like[]
  followers    Follow[]      @relation("UserFollow")
  following    Follow[]      @relation("FollowedUser")
  refreshTokens RefreshToken[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  reviewId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  likes     Like[]
  files     File[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  grade     Int
  title     String
  category  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  files     File[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    Int
  itemType  ItemType
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review?  @relation(fields: [itemId], references: [id], onDelete: Cascade, map: "reviewLikes")
  comment   Comment? @relation(fields: [itemId], references: [id], onDelete: Cascade, map: "commentLikes")

  @@index([itemId, itemType])
}

model Follow {
  id        Int      @id @default(autoincrement())
  senderId  Int
  receiverId Int
  createdAt DateTime @default(now())

  followerUser  User @relation("UserFollow", fields: [senderId], references: [id], onDelete: Cascade)
  followeeUser  User @relation("FollowedUser", fields: [receiverId], references: [id], onDelete: Cascade)
}

model File {
  id         Int      @id @default(autoincrement())
  userId     Int
  itemId     Int
  itemType   ItemType
  filename   String
  url        String
  path       String
  size       Int
  type       String
  uploadedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review     Review?  @relation(fields: [itemId], references: [id], onDelete: Cascade, map: "reviewFiles")
  comment    Comment? @relation(fields: [itemId], references: [id], onDelete: Cascade, map: "commentFiles")

  @@index([itemId, itemType])
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int
  refreshToken String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ItemType {
  REVIEW
  COMMENT
}
